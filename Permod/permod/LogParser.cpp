/* permod/LoParser.cpp */
/* Parse log file generated by Macker. */

#include "permod/LogParser.h"
#include <llvm/Support/Error.h>
#include <llvm/Support/MemoryBuffer.h>
#include <llvm/Support/raw_ostream.h>
#include <sstream>

namespace permod {

LogParser::LogParser(const std::string &FileName) : InputFileName(FileName) {}

void LogParser::parse() {
  // FIXME: Permod currently does not support parsing Macker logs.
  return;

  auto BufferOrError = llvm::MemoryBuffer::getFile(InputFileName);
  if (!BufferOrError) {
    llvm::errs() << "Error opening input file: " << InputFileName << "\n";
    return;
  }

  std::string Line;
  bool IsHeader = true;
  std::istringstream Stream(BufferOrError.get()->getBuffer().str());

  while (std::getline(Stream, Line)) {
    if (IsHeader) {
      IsHeader = false; // Skip the header line
      continue;
    }

    // Handle CSV entries including newlines
    while (std::count(Line.begin(), Line.end(), ',') < 5) {
      std::string NextLine;
      if (std::getline(Stream, NextLine)) {
        Line += "\n" + NextLine;
      } else {
        llvm::errs() << "Malformed CSV line: " << Line << "\n";
        break;
      }
    }

    // Split the line into components, handling fields enclosed in double quotes
    std::istringstream LineStream(Line);
    std::string FileName, LineNumber, FunctionName, EventType, Content,
        ExtraInfo;

    auto getField = [](std::istringstream &stream) -> std::string {
      std::string field;
      if (stream.peek() == '"') {
        stream.get(); // Consume the opening quote
        std::getline(stream, field, '"');
        stream.get(); // Consume the comma after the closing quote
      } else {
        std::getline(stream, field, ',');
      }
      return field;
    };

    FileName = getField(LineStream);
    LineNumber = getField(LineStream);
    FunctionName = getField(LineStream);
    EventType = getField(LineStream);
    Content = getField(LineStream);
    ExtraInfo = getField(LineStream);

    if (LineNumber.empty() ||
        !std::all_of(LineNumber.begin(), LineNumber.end(), ::isdigit)) {
      llvm::errs() << "Invalid or empty LineNumber: " << LineNumber
                   << " in line: " << Line << "\n";
      continue;
    }

    unsigned LineNum = std::stoi(LineNumber);

    // FIXME: correctly parse the content
    // ParsedLogs.push_back(
    //     {FileName, LineNum, FunctionName, EventType, Content, ExtraInfo});
  }

  llvm::outs() << "Parsed logs from " << InputFileName << "\n";
}

const std::vector<macker::LogManager::LogEntry> &
LogParser::getParsedLogs() const {
  return ParsedLogs;
}

} // namespace permod